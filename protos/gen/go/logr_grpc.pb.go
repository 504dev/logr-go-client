// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: logr.proto

package logrpcv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogRpcClient is the client API for LogRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogRpcClient interface {
	Push(ctx context.Context, in *LogRpcPackage, opts ...grpc.CallOption) (*Response, error)
}

type logRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewLogRpcClient(cc grpc.ClientConnInterface) LogRpcClient {
	return &logRpcClient{cc}
}

func (c *logRpcClient) Push(ctx context.Context, in *LogRpcPackage, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/logr.LogRpc/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogRpcServer is the server API for LogRpc service.
// All implementations must embed UnimplementedLogRpcServer
// for forward compatibility
type LogRpcServer interface {
	Push(context.Context, *LogRpcPackage) (*Response, error)
	mustEmbedUnimplementedLogRpcServer()
}

// UnimplementedLogRpcServer must be embedded to have forward compatible implementations.
type UnimplementedLogRpcServer struct {
}

func (UnimplementedLogRpcServer) Push(context.Context, *LogRpcPackage) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedLogRpcServer) mustEmbedUnimplementedLogRpcServer() {}

// UnsafeLogRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogRpcServer will
// result in compilation errors.
type UnsafeLogRpcServer interface {
	mustEmbedUnimplementedLogRpcServer()
}

func RegisterLogRpcServer(s grpc.ServiceRegistrar, srv LogRpcServer) {
	s.RegisterService(&LogRpc_ServiceDesc, srv)
}

func _LogRpc_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRpcPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logr.LogRpc/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).Push(ctx, req.(*LogRpcPackage))
	}
	return interceptor(ctx, in, info, handler)
}

// LogRpc_ServiceDesc is the grpc.ServiceDesc for LogRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logr.LogRpc",
	HandlerType: (*LogRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _LogRpc_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logr.proto",
}

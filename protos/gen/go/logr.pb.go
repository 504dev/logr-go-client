// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: logr.proto

package logrv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DashId      int32             `protobuf:"varint,1,opt,name=dash_id,json=dashId,proto3" json:"dash_id,omitempty"`
	PublicKey   string            `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	CipherLog   []byte            `protobuf:"bytes,3,opt,name=cipher_log,json=cipherLog,proto3" json:"cipher_log,omitempty"`
	CipherCount []byte            `protobuf:"bytes,4,opt,name=cipher_count,json=cipherCount,proto3" json:"cipher_count,omitempty"`
	PlainLog    []byte            `protobuf:"bytes,5,opt,name=plain_log,json=plainLog,proto3" json:"plain_log,omitempty"`
	Sig         string            `protobuf:"bytes,6,opt,name=sig,proto3" json:"sig,omitempty"`
	Log         *LogPackage_Log   `protobuf:"bytes,7,opt,name=log,proto3" json:"log,omitempty"`
	Count       *LogPackage_Count `protobuf:"bytes,8,opt,name=count,proto3" json:"count,omitempty"`
	Chunk       *LogPackage_Chunk `protobuf:"bytes,9,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *LogPackage) Reset() {
	*x = LogPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPackage) ProtoMessage() {}

func (x *LogPackage) ProtoReflect() protoreflect.Message {
	mi := &file_logr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPackage.ProtoReflect.Descriptor instead.
func (*LogPackage) Descriptor() ([]byte, []int) {
	return file_logr_proto_rawDescGZIP(), []int{0}
}

func (x *LogPackage) GetDashId() int32 {
	if x != nil {
		return x.DashId
	}
	return 0
}

func (x *LogPackage) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *LogPackage) GetCipherLog() []byte {
	if x != nil {
		return x.CipherLog
	}
	return nil
}

func (x *LogPackage) GetCipherCount() []byte {
	if x != nil {
		return x.CipherCount
	}
	return nil
}

func (x *LogPackage) GetPlainLog() []byte {
	if x != nil {
		return x.PlainLog
	}
	return nil
}

func (x *LogPackage) GetSig() string {
	if x != nil {
		return x.Sig
	}
	return ""
}

func (x *LogPackage) GetLog() *LogPackage_Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *LogPackage) GetCount() *LogPackage_Count {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *LogPackage) GetChunk() *LogPackage_Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_logr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_logr_proto_rawDescGZIP(), []int{1}
}

type LogPackage_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DashId    int32  `protobuf:"varint,1,opt,name=dash_id,json=dashId,proto3" json:"dash_id,omitempty"`
	Pid       int32  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Hostname  string `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Logname   string `protobuf:"bytes,5,opt,name=logname,proto3" json:"logname,omitempty"`
	Level     string `protobuf:"bytes,6,opt,name=level,proto3" json:"level,omitempty"`
	Message   string `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	Version   string `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	Initiator string `protobuf:"bytes,10,opt,name=initiator,proto3" json:"initiator,omitempty"`
}

func (x *LogPackage_Log) Reset() {
	*x = LogPackage_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPackage_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPackage_Log) ProtoMessage() {}

func (x *LogPackage_Log) ProtoReflect() protoreflect.Message {
	mi := &file_logr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPackage_Log.ProtoReflect.Descriptor instead.
func (*LogPackage_Log) Descriptor() ([]byte, []int) {
	return file_logr_proto_rawDescGZIP(), []int{0, 0}
}

func (x *LogPackage_Log) GetDashId() int32 {
	if x != nil {
		return x.DashId
	}
	return 0
}

func (x *LogPackage_Log) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *LogPackage_Log) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LogPackage_Log) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *LogPackage_Log) GetLogname() string {
	if x != nil {
		return x.Logname
	}
	return ""
}

func (x *LogPackage_Log) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *LogPackage_Log) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogPackage_Log) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LogPackage_Log) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

type LogPackage_Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DashId    int32                     `protobuf:"varint,1,opt,name=dash_id,json=dashId,proto3" json:"dash_id,omitempty"`
	Timestamp int64                     `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Hostname  string                    `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Version   string                    `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Logname   string                    `protobuf:"bytes,5,opt,name=logname,proto3" json:"logname,omitempty"`
	Keyname   string                    `protobuf:"bytes,6,opt,name=keyname,proto3" json:"keyname,omitempty"`
	Metrics   *LogPackage_Count_Metrics `protobuf:"bytes,7,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *LogPackage_Count) Reset() {
	*x = LogPackage_Count{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPackage_Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPackage_Count) ProtoMessage() {}

func (x *LogPackage_Count) ProtoReflect() protoreflect.Message {
	mi := &file_logr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPackage_Count.ProtoReflect.Descriptor instead.
func (*LogPackage_Count) Descriptor() ([]byte, []int) {
	return file_logr_proto_rawDescGZIP(), []int{0, 1}
}

func (x *LogPackage_Count) GetDashId() int32 {
	if x != nil {
		return x.DashId
	}
	return 0
}

func (x *LogPackage_Count) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LogPackage_Count) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *LogPackage_Count) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LogPackage_Count) GetLogname() string {
	if x != nil {
		return x.Logname
	}
	return ""
}

func (x *LogPackage_Count) GetKeyname() string {
	if x != nil {
		return x.Keyname
	}
	return ""
}

func (x *LogPackage_Count) GetMetrics() *LogPackage_Count_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type LogPackage_Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Ts  int64  `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	I   int32  `protobuf:"varint,3,opt,name=i,proto3" json:"i,omitempty"`
	N   int32  `protobuf:"varint,4,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *LogPackage_Chunk) Reset() {
	*x = LogPackage_Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPackage_Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPackage_Chunk) ProtoMessage() {}

func (x *LogPackage_Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_logr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPackage_Chunk.ProtoReflect.Descriptor instead.
func (*LogPackage_Chunk) Descriptor() ([]byte, []int) {
	return file_logr_proto_rawDescGZIP(), []int{0, 2}
}

func (x *LogPackage_Chunk) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *LogPackage_Chunk) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *LogPackage_Chunk) GetI() int32 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *LogPackage_Chunk) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

type LogPackage_Count_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inc     float32 `protobuf:"fixed32,1,opt,name=inc,proto3" json:"inc,omitempty"`
	Max     float32 `protobuf:"fixed32,2,opt,name=max,proto3" json:"max,omitempty"`
	Min     float32 `protobuf:"fixed32,3,opt,name=min,proto3" json:"min,omitempty"`
	AvgSum  float32 `protobuf:"fixed32,4,opt,name=avg_sum,json=avgSum,proto3" json:"avg_sum,omitempty"`
	AvgNum  int32   `protobuf:"varint,5,opt,name=avg_num,json=avgNum,proto3" json:"avg_num,omitempty"`
	PerTkn  float32 `protobuf:"fixed32,6,opt,name=per_tkn,json=perTkn,proto3" json:"per_tkn,omitempty"`
	PerTtl  float32 `protobuf:"fixed32,7,opt,name=per_ttl,json=perTtl,proto3" json:"per_ttl,omitempty"`
	TimeDur float32 `protobuf:"fixed32,8,opt,name=time_dur,json=timeDur,proto3" json:"time_dur,omitempty"`
}

func (x *LogPackage_Count_Metrics) Reset() {
	*x = LogPackage_Count_Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPackage_Count_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPackage_Count_Metrics) ProtoMessage() {}

func (x *LogPackage_Count_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_logr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPackage_Count_Metrics.ProtoReflect.Descriptor instead.
func (*LogPackage_Count_Metrics) Descriptor() ([]byte, []int) {
	return file_logr_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *LogPackage_Count_Metrics) GetInc() float32 {
	if x != nil {
		return x.Inc
	}
	return 0
}

func (x *LogPackage_Count_Metrics) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *LogPackage_Count_Metrics) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *LogPackage_Count_Metrics) GetAvgSum() float32 {
	if x != nil {
		return x.AvgSum
	}
	return 0
}

func (x *LogPackage_Count_Metrics) GetAvgNum() int32 {
	if x != nil {
		return x.AvgNum
	}
	return 0
}

func (x *LogPackage_Count_Metrics) GetPerTkn() float32 {
	if x != nil {
		return x.PerTkn
	}
	return 0
}

func (x *LogPackage_Count_Metrics) GetPerTtl() float32 {
	if x != nil {
		return x.PerTtl
	}
	return 0
}

func (x *LogPackage_Count_Metrics) GetTimeDur() float32 {
	if x != nil {
		return x.TimeDur
	}
	return 0
}

var File_logr_proto protoreflect.FileDescriptor

var file_logr_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x6f,
	0x67, 0x72, 0x22, 0x95, 0x08, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x64, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x03, 0x6c, 0x6f,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f, 0x67, 0x72, 0x2e, 0x4c,
	0x6f, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c,
	0x6f, 0x67, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x67, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6c, 0x6f, 0x67, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0xec,
	0x01, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x6f, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0xa3, 0x03,
	0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x73, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x61, 0x73, 0x68, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x1a, 0xbe, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x69, 0x6e, 0x63,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x76, 0x67, 0x53, 0x75, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x76, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x61, 0x76, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x6b,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x65, 0x72, 0x54, 0x6b, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x54, 0x74, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x64, 0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x44, 0x75, 0x72, 0x1a, 0x45, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0c,
	0x0a, 0x01, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x69, 0x12, 0x0c, 0x0a, 0x01,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6e, 0x22, 0x0a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x30, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x72, 0x12, 0x28,
	0x0a, 0x04, 0x50, 0x75, 0x73, 0x68, 0x12, 0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x72, 0x2e, 0x4c, 0x6f,
	0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x0e, 0x2e, 0x6c, 0x6f, 0x67, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1a, 0x5a, 0x18, 0x6b, 0x6f, 0x7a, 0x68,
	0x75, 0x72, 0x6b, 0x69, 0x6e, 0x2e, 0x6c, 0x6f, 0x67, 0x72, 0x2e, 0x76, 0x31, 0x3b, 0x6c, 0x6f,
	0x67, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_logr_proto_rawDescOnce sync.Once
	file_logr_proto_rawDescData = file_logr_proto_rawDesc
)

func file_logr_proto_rawDescGZIP() []byte {
	file_logr_proto_rawDescOnce.Do(func() {
		file_logr_proto_rawDescData = protoimpl.X.CompressGZIP(file_logr_proto_rawDescData)
	})
	return file_logr_proto_rawDescData
}

var file_logr_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_logr_proto_goTypes = []interface{}{
	(*LogPackage)(nil),               // 0: logr.LogPackage
	(*Response)(nil),                 // 1: logr.Response
	(*LogPackage_Log)(nil),           // 2: logr.LogPackage.Log
	(*LogPackage_Count)(nil),         // 3: logr.LogPackage.Count
	(*LogPackage_Chunk)(nil),         // 4: logr.LogPackage.Chunk
	(*LogPackage_Count_Metrics)(nil), // 5: logr.LogPackage.Count.Metrics
}
var file_logr_proto_depIdxs = []int32{
	2, // 0: logr.LogPackage.log:type_name -> logr.LogPackage.Log
	3, // 1: logr.LogPackage.count:type_name -> logr.LogPackage.Count
	4, // 2: logr.LogPackage.chunk:type_name -> logr.LogPackage.Chunk
	5, // 3: logr.LogPackage.Count.metrics:type_name -> logr.LogPackage.Count.Metrics
	0, // 4: logr.Logr.Push:input_type -> logr.LogPackage
	1, // 5: logr.Logr.Push:output_type -> logr.Response
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_logr_proto_init() }
func file_logr_proto_init() {
	if File_logr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_logr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogPackage_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogPackage_Count); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogPackage_Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogPackage_Count_Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logr_proto_goTypes,
		DependencyIndexes: file_logr_proto_depIdxs,
		MessageInfos:      file_logr_proto_msgTypes,
	}.Build()
	File_logr_proto = out.File
	file_logr_proto_rawDesc = nil
	file_logr_proto_goTypes = nil
	file_logr_proto_depIdxs = nil
}
